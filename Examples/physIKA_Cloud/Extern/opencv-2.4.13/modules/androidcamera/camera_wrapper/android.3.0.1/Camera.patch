*** src2.3.3/frameworks/base/include/camera/Camera.h	2011-04-04 20:18:36.718480237 +0400
--- src_mock3.0.1/frameworks/base/include/camera/Camera.h	2012-01-15 20:51:36.000000000 +0400
***************
*** 20,25 ****
--- 20,27 ----
  #include <utils/Timers.h>
  #include <camera/ICameraClient.h>
  
+ #include <gui/ISurfaceTexture.h>
+ 
  namespace android {
  
  class ISurface;
***************
*** 76,81 ****
--- 78,90 ----
      CAMERA_MSG_POSTVIEW_FRAME   = 0x040,
      CAMERA_MSG_RAW_IMAGE        = 0x080,
      CAMERA_MSG_COMPRESSED_IMAGE = 0x100,
+ 
+ #ifdef OMAP_ENHANCEMENT
+ 
+     CAMERA_MSG_BURST_IMAGE      = 0x200,
+ 
+ #endif
+ 
      CAMERA_MSG_ALL_MSGS         = 0x1FF
  };
  
***************
*** 144,150 ****
--- 153,164 ----
  public:
      virtual void notify(int32_t msgType, int32_t ext1, int32_t ext2) = 0;
      virtual void postData(int32_t msgType, const sp<IMemory>& dataPtr) = 0;
+ #ifdef OMAP_ENHANCEMENT
+     virtual void postDataTimestamp(nsecs_t timestamp, int32_t msgType, const sp<IMemory>& dataPtr,
+                     uint32_t offset=0, uint32_t stride=0) = 0;
+ #else
      virtual void postDataTimestamp(nsecs_t timestamp, int32_t msgType, const sp<IMemory>& dataPtr) = 0;
+ #endif
  };
  
  class Camera : public BnCameraClient, public IBinder::DeathRecipient
***************
*** 170,175 ****
--- 184,191 ----
              status_t    setPreviewDisplay(const sp<Surface>& surface);
              status_t    setPreviewDisplay(const sp<ISurface>& surface);
  
+             // pass the SurfaceTexture object to the Camera
+ 			status_t    setPreviewTexture(const sp<ISurfaceTexture>& surfaceTexture);
              // start preview mode, must call setPreviewDisplay first
              status_t    startPreview();
  
***************
*** 215,221 ****
--- 231,242 ----
      // ICameraClient interface
      virtual void        notifyCallback(int32_t msgType, int32_t ext, int32_t ext2);
      virtual void        dataCallback(int32_t msgType, const sp<IMemory>& dataPtr);
+ #ifdef OMAP_ENHANCEMENT
+     virtual void        dataCallbackTimestamp(nsecs_t timestamp, int32_t msgType, const sp<IMemory>& dataPtr,
+                                 uint32_t offset=0, uint32_t stride=0);
+ #else
      virtual void        dataCallbackTimestamp(nsecs_t timestamp, int32_t msgType, const sp<IMemory>& dataPtr);
+ #endif
  
      sp<ICamera>         remote();
  
